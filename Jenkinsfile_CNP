#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

properties(
    [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ccpay-payment-app.git'],
     pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def type = "java"

def product = "payment"

def app = "api"

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

def vaultOverrides = [
    'preview': 'aat',
    'hmctsdemo': 'aat',

]

def secrets = [
    'ccpay-${env}': [
        secret('cmc-service-secret', 'S2S_SERVICE_SECRET'),
        secret('paybubble-s2s-secret', 'PAYBUBBLE_S2S_SERVICE_SECRET'),
        secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
        secret('freg-idam-generated-user-email-pattern', 'GENERATED_USER_EMAIL_PATTERN'),
        secret('freg-idam-test-user-password', 'TEST_USER_PASSWORD'),
        secret('gov-pay-keys-cmc', 'GOV_PAY_AUTH_KEY_CMC'),
        secret('pci-pal-antenna-client-secret', 'PCI_PAL_ANTENNA_CLIENT_SECRET'),
        secret('paybubble-idam-client-secret','IDAM_PAYBUBBLE_CLIENT_SECRET'),
        secret('payment-s2s-secret','S2S_PAYMENT_APP_SERVICE_SECRET'),
        secret('ref-data-professional-client-secret','IDAM_RD_PROFESSIONAL_CLIENT_SECRET'),
        secret('probate-solicitor-username', 'PROBATE_SOLICITOR_USER'),
        secret('probate-solicitor-password', 'PROBATE_SOLICITOR_PASSWORD'),
        secret('pci-pal-kerv-probate-flow-id', 'PCI_PAL_KERV_PROBATE_FLOW_ID'),
        secret('pci-pal-kerv-launch-url', 'PCI_PAL_KERV_LAUNCH_URL'),
        secret('pci-pal-kerv-view-id-url', 'PCI_PAL_KERV_VIEW_ID_URL')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

// Vars for Kubernetes
env.PACT_BROKER_URL = 'pact-broker.platform.hmcts.net'
env.PACT_BROKER_SCHEME = 'https'
env.PACT_BROKER_PORT = '443'
withPipeline(type, product, app) {
    enableAksStagingDeployment()
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableDbMigration('ccpay') // for liquibase update

    afterAlways('test') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "main.html",
            reportName           : "CCPAY Payment App PREVIEW Application Checkstyle Main Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "test.html",
            reportName           : "CCPAY Payment App PREVIEW Test Checkstyle Test Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "aat.html",
            reportName           : "CCPAY Payment App AAT Application Checkstyle AAT Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App PREVIEW Unit Tests Report"
        ]

    }

    afterAlways('smoketest:preview') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/tests/smokeTest",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App PREVIEW Smoke Test Report"
        ]
    }

    afterAlways('smoketest:aat') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/tests/smokeTest",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App AAT Smoke Test Report"
        ]
    }

    afterAlways('functionalTest:preview') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/target/site/serenity",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App PREVIEW Serenity Functional Tests"
        ]
    }

    before('functionalTest:aat') {
        env.REFUND_API_URL = 'http://ccpay-refunds-api-aat.service.core-compute-aat.internal'
        env.CCPAY_BULK_SCANNING_API_URL = 'http://ccpay-bulkscanning-api-aat.service.core-compute-aat.internal'
        println """\
                Using REFUND_API_URL: ${env.REFUND_API_URL}
                Using CCPAY_BULK_SCANNING_API_URL: ${env.CCPAY_BULK_SCANNING_API_URL}""".stripIndent()
    }

    afterAlways('functionalTest:aat') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/target/site/serenity",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App AAT Serenity Functional Tests"
        ]
    }

    //enableDockerBuild()
    //installCharts()
    enableSlackNotifications('#fee-pay-nightly-pipeline')
    disableLegacyDeployment()
    onMaster() {
        enablePactAs([
                AppPipelineDsl.PactRoles.PROVIDER
        ])
    }
    onPR() {
        enablePactAs([
                AppPipelineDsl.PactRoles.PROVIDER
        ])

        env.REFUND_API_URL = "https://ccpay-refunds-api-payment-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.CCPAY_BULK_SCANNING_API_URL = "https://ccpay-bulkscanning-api-payment-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    }

    //Sync demo,ithc and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

}
