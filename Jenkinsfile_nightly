#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    // pipelineTriggers([cron('H 20 * * *')]),
    parameters([
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
        string(name: 'URL_TO_TEST', defaultValue: 'http://payment-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
        string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The Idam url you want to run these tests against'),
        string(name: 'S2S_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The s2s url you want to run these tests against'),
        string(name: 'REF_DATA_API_URL', defaultValue: 'http://rd-professional-api-aat.service.core-compute-aat.internal', description: 'The ref data url you want to run these tests against'),
        string(name: 'OAUTH2_REDIRECT_URI', defaultValue: 'https://moneyclaims.aat.platform.hmcts.net', description: 'The redirect url you want to authenticate users and get idam token'),
        string(name: 'SecurityRules',
            defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
            description: 'SecurityUrl against which rules will be executed'),
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "payment"
def component = "api"

def secrets = [
    "ccpay-${params.ENVIRONMENT}": [
        secret('cmc-service-secret', 'S2S_SERVICE_SECRET'),
        secret('paybubble-s2s-secret', 'PAYBUBBLE_S2S_SERVICE_SECRET'),
        secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
        secret('freg-idam-generated-user-email-pattern', 'GENERATED_USER_EMAIL_PATTERN'),
        secret('freg-idam-test-user-password', 'TEST_USER_PASSWORD'),
        secret('gov-pay-keys-cmc', 'GOV_PAY_AUTH_KEY_CMC'),
        secret('pci-pal-antenna-client-secret', 'PCI_PAL_ANTENNA_CLIENT_SECRET'),
        secret('paybubble-idam-client-secret','IDAM_PAYBUBBLE_CLIENT_SECRET'),
        secret('ref-data-professional-client-secret','IDAM_RD_PROFESSIONAL_CLIENT_SECRET'),
        secret('probate-solicitor-username', 'PROBATE_SOLICITOR_USER'),
        secret('probate-solicitor-password', 'PROBATE_SOLICITOR_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline("java", product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.IDAM_API_URL = params.IDAM_API_URL
    env.S2S_URL = params.S2S_URL
    env.REF_DATA_API_URL = params.REF_DATA_API_URL
    env.OAUTH2_REDIRECT_URI = params.OAUTH2_REDIRECT_URI
    loadVaultSecrets(secrets)
    enableSecurityScan()
    enableMutationTest()
    enableFortifyScan('ccpay-aat')
    enableFullFunctionalTest()
    enableSlackNotifications('#cc-payments-tech')

    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('test') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "main.html",
            reportName           : "CCPAY Payment App PREVIEW Application Checkstyle Main Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "test.html",
            reportName           : "CCPAY Payment App PREVIEW Test Checkstyle Test Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/checkstyle",
            reportFiles          : "aat.html",
            reportName           : "CCPAY Payment App AAT Application Checkstyle AAT Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App PREVIEW Unit Tests Report"
        ]

    }

    afterAlways('fullFunctionalTest') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "api/target/site/serenity",
            reportFiles          : "index.html",
            reportName           : "CCPAY Payment App Serenity Functional Tests"
        ]
    }
}
