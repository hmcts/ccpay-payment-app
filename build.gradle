plugins {
    id 'application'
    id "org.sonarqube" version "3.0"
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    //id 'org.owasp.dependencycheck' version '5.3.0'
    id "uk.gov.hmcts.java" version '0.8.0'
    id "com.gorylenko.gradle-git-properties" version "1.4.21"
    id 'jacoco'
}

def springBootVersion = '2.2.6.RELEASE'
def springCloudVersion = 'Finchley.SR2'


def versions = [
        lombok: '1.18.12',
        javaVersion: '11',
        jacocoVersion: '0.8.5'
]

allprojects {
    apply plugin: 'maven'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    group = 'uk.gov.hmcts.reform.payment'
    ext {
        buildNumber = System.getenv("BUILD_NUMBER") ?: '0'
    }
    version = rootProject.file('version.txt').text.trim() + ".${buildNumber}"

    sourceCompatibility = versions.javaVersion
    targetCompatibility = versions.javaVersion

    repositories {
        mavenLocal()
        maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
        jcenter()
        maven { url 'https://repo.spring.io/libs-milestone' }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom 'org.apache.logging.log4j:log4j-bom:2.13.3'
        }
        dependencies {
            dependencySet(
                    group: 'com.fasterxml.jackson.core',
                    version: '2.10.0'
            ) {
                entry 'jackson-core'
                entry 'jackson-databind'
            }
        }
    }


    tasks.register("codeCoverageReport", JacocoReport) {
        // If a subproject applies the 'jacoco' plugin, add the result it to the report
        subprojects { subproject ->
            subproject.plugins.withType(JacocoPlugin).configureEach {
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {
                    testTask ->
                        if (testTask.getTaskIdentity().name == "test") {
                            sourceSets subproject.sourceSets.main
                            executionData(testTask)
                        }
                }
            }
        }
        // enable the different report types (html, xml, csv)
        reports {
            // xml is usually used to integrate code coverage with
            // other tools like SonarQube, Coveralls or Codecov
            xml.enabled true
            // HTML reports can be used to see code coverage
            // without any external tools
            html.enabled true
            xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        }
    }

    codeCoverageReport.dependsOn {
        subprojects*.test
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    dependencies {
        compile ('com.sun.xml.bind:jaxb-osgi:2.3.1')

        //compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
        //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
        //compile group:'org.dom4j',name:'dom4j',version: '2.1.3'

        testCompile 'io.github.openfeign:feign-jackson:9.7.0'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.10.0'
        compile group: 'joda-time', name: 'joda-time', version: '2.10.5'
        compile group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
        compile group:'org.apache.poi', name: 'poi-ooxml', version: '4.1.0'
        compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
        compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'
        compile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.23.2'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
        compile(group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.6.4') {
            sourceSets {
                main {
                    java {
                        exclude '**/CoreCaseDataClientAutoConfiguration.java'
                    }
                }
            }
        }

    }
}

dependencies {
    compile project(':payment-api')
}

mainClassName = 'uk.gov.hmcts.PaymentApiApplication'

jar {
    enabled = true
}

bootJar {
    archiveName 'payment-app.jar'
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

springBoot {
    buildInfo()
}

dependencyCheck {
    failBuildOnCVSS = 0
    suppressionFile = 'dependency-check-suppressions.xml'
    format='ALL'
}

def sonarExclusions = [
        '**/v1/**',
        '**/OtpBootstrap.java',
        '**/api/model/**',
        '**/referencedata/model/**',
        '**/api/dto/*.java',
        '**/referencedata/dto/*.java',
        '**/api/service/*Service.java',
        '**/referencedata/service/*Service.java',
        '**/api/service/MockAccountServiceImpl.java',
        '**/api/service/MockCcdDataStoreClientServiceImpl.java',
        '**/api/controllers/mock/MockCallbackControllerForTesting.java',
        '**/api/contract/**',
        '**/api/dto/mapper/**',
        '**/api/reports/config/**',
        '**/api/external/client/dto/**',
        '**/api/external/client/exceptions/**',
        '**/api/jpaaudit/listner/**',
        '**/api/jpaaudit/model/**'
]

sonarqube {
    properties {
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.test.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.exclusions", sonarExclusions.join(", ")
        property "sonar.projectName", "payment-app"
        property "sonar.projectKey", "uk.gov.hmcts.reform.payment:payment-app"
    }
}

project.tasks['sonarqube'].dependsOn codeCoverageReport

task smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['smokeTest']
}

task functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {
    buildFile = './api/build.gradle'
    tasks = ['functionalTest']
}

task migratePostgresDatabase(type: GradleBuild, description: 'Migrates Postgres Database', group: 'liquibase') {
    //forward projectProperties
    startParameter.projectProperties = project.gradle.startParameter.projectProperties
    buildFile = './api/build.gradle'
    tasks = ['migratePostgresDatabase']
}

task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
